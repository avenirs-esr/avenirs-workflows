name: "Deploy on Server"
description: "Deploy application on a remote server using SSH"

inputs:
  server_ip:
    description: "IP address of the remote server"
    required: true
  openvpn_conf_b64:
    description: "Base64-encoded .ovpn client file"
    required: true
  openvpn_user:
    description: "OpenVPN username"
    required: true
  openvpn_pass:
    description: "OpenVPN password"
    required: true
  ssh_key:
    description: "SSH private key"
    required: true
  ssh_user:
    description: "SSH user"
    required: true
  srv_base_path:
    description: "Base path on the server where the application is located"
    required: true
  srv_deploy_cmd:
    description: "Command to deploy the application on the server (e.g., ./deploy.sh)"
    required: true
  jasypt_encryptor_password:
    description: "Password for Jasypt encryption"
    required: true
  java_version:
    description: "Java version to use on the server (e.g., 21.0.4-oracle)"
    required: true
  maven_version:
    description: "Maven version to use on the server (e.g., 3.9.9)"
    required: true
  repos_target_keys:
    description: "Keys for repositories to update in the conf file, separated by ;"
    required: true
  conf_path:
    description: "Path to the configuration file on the server (if needed)"
    required: false
  conf_file:
    description: "Configuration file name (if needed)"
    required: false
  tag_name:
    description: "Tag name for the deployment (if needed)"
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: 🛠️ Install OpenVPN & tools
      run: |
        sudo apt-get update
        sudo apt-get install -y openvpn net-tools iproute2
      shell: bash

    - name: 📜 Write OpenVPN config from secret
      run: |
        echo "${{ inputs.openvpn_conf_b64 }}" | base64 -d > client.ovpn
        echo "auth-nocache" >> client.ovpn
        chmod 600 client.ovpn
      shell: bash

    - name: 👮‍♂️ Start OpenVPN (daemon) and wait for tun0
      run: |
        if [ -n "${{ inputs.openvpn_user || '' }}" ] && [ -n "${{ inputs.openvpn_pass || '' }}" ]; then
          printf "%s\n%s\n" "${{ inputs.openvpn_user }}" "${{ inputs.openvpn_pass }}" > auth.txt
          chmod 600 auth.txt
          if grep -qE '^\s*auth-user-pass(\s+\S+)?\s*$' client.ovpn; then
            sed -i 's/^\s*auth-user-pass\s*$/auth-user-pass auth.txt/' client.ovpn
          else
            echo "auth-user-pass auth.txt" >> client.ovpn
          fi
        fi

        sudo openvpn --config client.ovpn --daemon --writepid /tmp/openvpn.pid --log /tmp/openvpn.log
        echo "Waiting for VPN connection (tun0)..."
        for i in {1..30}; do
          if ip addr show tun0 >/dev/null 2>&1; then
            echo "VPN connected (tun0 is up)."
            ip addr show tun0
            break
          fi
          echo "Waiting for tun0... ($i/30)"
          sleep 2
        done
        if ! ip addr show tun0 >/dev/null 2>&1; then
          echo "::error::VPN connection failed (tun0 not found)"
          echo "Last OpenVPN log lines:"
          sudo tail -n 20 /tmp/openvpn.log || true
          exit 1
        fi
        echo "VPN connection established."
      shell: bash

    - name: 🔑 Add SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ inputs.ssh_key }}

    - name: 🛡️ Trust target host key
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H "${{ inputs.server_ip }}" >> ~/.ssh/known_hosts
      shell: bash

    - name: 🚀 Run deploy commands on server
      run: |
        SSH_USER='${{ inputs.ssh_user }}'
        SERVER_IP='${{ inputs.server_ip }}'
        JAVA_VERSION='${{ inputs.java_version }}'
        MAVEN_VERSION='${{ inputs.maven_version }}'
        JASYPT='${{ inputs.jasypt_encryptor_password }}'
        SRV_BASE_PATH='${{ inputs.srv_base_path }}'
        TAG_NAME='${{ inputs.tag_name }}'
        CONF_DIR='${{ inputs.conf_path }}'
        CONF_FILE='${{ inputs.conf_file }}'
        SRV_DEPLOY_CMD='${{ inputs.srv_deploy_cmd }}'
        REPOS_TARGET_KEYS='${{ inputs.repos_target_keys }}'

        ssh -o StrictHostKeyChecking=yes -o BatchMode=yes -o ConnectTimeout=20 \
          "$SSH_USER@$SERVER_IP" 'bash -s --' \
          "$JAVA_VERSION" "$MAVEN_VERSION" "$JASYPT" "$SRV_BASE_PATH" "$TAG_NAME" "$CONF_DIR" "$CONF_FILE" "$SRV_DEPLOY_CMD" "$REPOS_TARGET_KEYS" <<'REMOTE'

        JAVA_VERSION="$1"
        MAVEN_VERSION="$2"
        JASYPT="$3"
        SRV_BASE_PATH="$4"
        TAG_NAME="$5"
        CONF_DIR="${6:-}"
        CONF_FILE="${7:-}"
        SRV_DEPLOY_CMD="$8"
        REPOS_TARGET_KEYS="$9"

        echo "Connected to $(hostname)"

        echo "variable avant ssh : ${REPOS_TARGET_KEYS:-}"
        echo "variable avant ssh v2 : ${REPOS_TARGET_KEYS}"

        export SDKMAN_DIR="$HOME/.sdkman"
        [ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ] && . "$SDKMAN_DIR/bin/sdkman-init.sh"
        export JAVA_HOME="$(sdk home java "$JAVA_VERSION")"
        export M2_HOME="$(sdk home maven "$MAVEN_VERSION")"
        export PATH="$JAVA_HOME/bin:$M2_HOME/bin:$PATH"
        export JASYPT_ENCRYPTOR_PASSWORD="$JASYPT"

        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

        cd "$SRV_BASE_PATH" || exit 10

        if [ -n "$TAG_NAME" ]; then
          echo "Tag fourni: $TAG_NAME — mise à jour de la conf"
          if [ -n "$CONF_FILE" ]; then
            CONF_PATH="$CONF_FILE"
            [ -n "$CONF_DIR" ] && CONF_PATH="$CONF_DIR/$CONF_FILE"
            if [ -f "$CONF_PATH" ]; then
              esc_tag=$(printf '%s\n' "$TAG_NAME" | sed 's/[\/&]/\\&/g')
              keys=(
                'services/avenirs-portfolio/avenirs-cofolio-client'
                'services/avenirs-portfolio/avenirs-portfolio-api'
              )
              for k in "${keys[@]}"; do
                echo "Clé en cours de modification: $k dans $CONF_PATH"
                k="$(echo "$k" | xargs)"
                [ -n "$k" ] || continue
                sed -i -E "s|^([[:space:]]*)${k}([[:space:]]*)=([[:space:]]*).*$|\1${k} = ${esc_tag}|" "$CONF_PATH"
              done
              echo "✔ Conf mise à jour :"
              for k in "${keys[@]}"; do
                echo "Après modification: $k dans $CONF_PATH"
                k="$(echo "$k" | xargs)"; [ -n "$k" ] || continue
                grep -E "^ *${k} *=" "$CONF_PATH" || true
              done
            else
              echo "Fichier de conf introuvable: $CONF_PATH" >&2
            fi
          fi
        fi

        echo "Deployment commands executed successfully."
        REMOTE
      shell: bash

    - name: 🧹 Teardown VPN (always)
      if: always()
      run: |
        if [ -f /tmp/openvpn.pid ]; then
          sudo kill "$(cat /tmp/openvpn.pid)" || true
          sleep 2
        fi
        sudo pkill -f "openvpn --config" || true
        echo "Last OpenVPN log lines (for diagnostics):"
        sudo tail -n 80 /tmp/openvpn.log || true
      shell: bash
